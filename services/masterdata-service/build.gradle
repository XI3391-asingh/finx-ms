plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id "org.sonarqube" version "3.3"
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "org.openapi.generator" version "6.0.0"
}

group = 'com.finx.masterdataservice'
version = '1.0-SNAPSHOT'
description = 'This is service for storing and getting master data.'

project.ext {
    dropwizardVersion = '2.1.0'
    mainClass = 'com.finx.masterdataservice.MasterdataServiceApplication'
    junitVersion = "5.8.2"
    testContainersVersion = "1.16.3"
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

gitProperties {
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "IST"
}

sourceSets {
    componentTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/component-test/java')
        }
        resources.srcDir file('src/component-test/resources')
    }
}

configurations {
    componentTestImplementation.extendsFrom testImplementation
    componentTestRuntime.extendsFrom testRuntime
}

task componentTest(type: Test) {
    useJUnitPlatform()
    testLogging {
        events("passed", "failed", "skipped")
    }
    description = "Runs component tests"
    testClassesDirs = sourceSets.componentTest.output.classesDirs
    classpath = sourceSets.componentTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

processComponentTestResources {
    duplicatesStrategy = 'include'
}

check.dependsOn componentTest
componentTest.mustRunAfter test

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.dropwizard:dropwizard-dependencies:${dropwizardVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testContainersVersion}"
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation 'io.dropwizard:dropwizard-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'io.dropwizard:dropwizard-jdbi3'
    implementation 'io.dropwizard:dropwizard-migrations'
    implementation 'org.jdbi:jdbi3-postgres'
    implementation 'org.jdbi:jdbi3-jackson2'
    runtimeOnly 'org.postgresql:postgresql:42.3.6'
    implementation 'io.swagger:swagger-annotations:1.6.6'

    testImplementation("io.dropwizard:dropwizard-testing") {
        exclude group: "junit", module: "junit"
    }
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("com.h2database:h2")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.jdbi:jdbi3-testing")
    componentTestImplementation("org.postgresql:postgresql:42.3.6")
    componentTestImplementation("org.testcontainers:junit-jupiter")
    componentTestImplementation("org.testcontainers:postgresql")
    componentTestImplementation("org.jbehave:jbehave-core:5.0")
    componentTestImplementation 'io.dropwizard:dropwizard-client'
}


shadowJar {
    mergeServiceFiles()
    exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
    manifest {
        attributes 'Main-Class': mainClass
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test.finalizedBy jacocoTestReport

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "failed", "skipped")
    }
}

tasks.withType(Checkstyle) {
    configFile file('codequality/checkstyle.xml')
    checkstyleMain.source = "src/main/java"
    checkstyleTest.enabled = false
    checkstyleComponentTest.enabled = false
}

build.finalizedBy shadowJar

sonarqube {
    properties {
        property "sonar.coverage.exclusions",
                "**/**"
    }
}

abstract class ServiceJarSizeTask extends DefaultTask {
    @TaskAction
    def serviceJarSize() {
        def jarPath = project.buildDir.absolutePath + "/libs/${project.rootProject.name}-${project.version}-all.jar"
        def jarFile = project.file(jarPath)
        def jarSizeInMbs = (jarFile.length() / (1024 * 1024)).round(2)
        def maxJarSizeInMbs = 40
        if (jarSizeInMbs > maxJarSizeInMbs) {
            throw new GradleException("Service executable JAR size is $jarSizeInMbs Mb. The max allowed JAR size is $maxJarSizeInMbs Mb")
        } else {
            println "Service executable JAR size is $jarSizeInMbs Mb. It is below the current max jar size limit $maxJarSizeInMbs Mb"
        }
    }
}

tasks.register('serviceJarSize', ServiceJarSizeTask)

shadowJar.finalizedBy serviceJarSize

task buildApiServer(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "jaxrs-spec"
    inputSpec = "$rootDir/src/main/resources/masterdata-service-api.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "com.finx.masterdataservice.api"
    modelPackage = "com.finx.masterdataservice.api"
    configOptions = [
            java8            : "true",
            dateLibrary      : "java8",
            useBeanValidation: "true",
            interfaceOnly    : "true",
            returnResponse : "true",
            generateBuilders : "true"
    ]
}

compileJava.dependsOn(buildApiServer)

sourceSets {
    main {
        java {
            srcDir "$buildDir/generated/src/gen/java"
        }
    }
}